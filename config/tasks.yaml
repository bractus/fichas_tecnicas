task_read_sources:
  description: |
    Extract complete content from all sources in {sources}.
    - Local files: use multi_reader_tool
    - URLs: use web_scraping_tool
    - Keep source identification
    Use SourceContent model for structuring.
  expected_output: "List of contents organized by source."
  agent: file_reader_agent

task_extract_fichas_tecnicas:
  description: |
    Extract technical sheets for EVERY recipe from all sources.

    **Rules:**
    - Process ALL recipes (files + URLs), no skipping
    - Use only provided sources (never invent or search recipes online)
    - Log progress: "Processing recipe 1 of X: [name]"

    **Per Recipe:**
    - Extract: name, ingredients, quantities, yield
    - modo_preparo:
      1. Prefer source content ("modo", "preparo", "como fazer", steps, instructions)
      2. If missing, generate generic steps from ingredients
      3. If still missing, default: ["1. Prepare as per standard instructions"]
    - Format as numbered list, include times/temps when available
    - Never leave modo_preparo empty
    - Calculate selling price ≥ 3x cost
    - Use fatores_rag for correction factors, fallback to web_search, default 1.0 only if nothing found
    - Units must be "kg" or "L"
    - Standard "to taste": salt=0.005kg, spices=0.002kg
    - Set custo_unitario=0.0 (to be updated later)

    **Validation:**
    - Ensure ALL recipes have modo_preparo with ≥ 1 step
    - Count matches number of recipes in sources
    - Verify JSON before returning

    **Output:**
    JSON array of FichaTecnica objects with standardized fields and factors.
  expected_output: "JSON array with ALL technical sheets, standardized and complete."
  agent: ficha_tecnica_agent
  context:
    - task_read_sources

task_extract_base_insumos:
  description: |
    Build ingredient base with market prices.

    **Consolidation:**
    - Unify similar names ("ovo"/"ovos")
    - One entry per normalized ingredient
    - Preserve correction factors
    - Units: "kg" or "L"

    **Price Research:**
    - Perform multiple searches until REAL numeric BRL price found
    - Queries: CEASA, wholesale, supermarket, suppliers
    - Convert "R$ 8,50" → 8.5
    - Extract supplier names (fallback: "Fornecedor Local")
    - Never use 0.0 price
    - Add {current_date}

    **Output:**
    JSON array of Insumo objects with ingredient, unit, price, factor, supplier, date.
  expected_output: "JSON array with ingredients, prices, suppliers, and date."
  agent: base_insumos_agent
  context:
    - task_extract_fichas_tecnicas

task_consolidate_data:
  description: |
    Merge recipes and ingredient data into final JSON for Excel.

    **Process:**
    - Match recipe ingredients with base_de_insumos by name
    - Update custo_unitario from base_de_insumos
    - Calculate recipe total cost and selling price:
      - total = Σ (quantidade * fator_correcao * custo_unitario)
      - selling price = (total * 3.5) / yield, rounded to nearest 0.50
      - must be ≥ 3x cost
    - Remove duplicates, preserve modo_preparo
    - Ensure no custo_unitario=0.0
    - If modo_preparo empty, default step provided

    **Output:**
    Final JSON:
    {
      "fichas_tecnicas": [...],
      "base_de_insumos": [...]
    }
  expected_output: "Complete JSON object with consolidated recipes and ingredients."
  agent: data_consolidator_agent
  context:
    - task_extract_fichas_tecnicas
    - task_extract_base_insumos

task_generate_excel:
  description: |
    Generate Excel file from consolidated JSON.

    **Process:**
    - Validate JSON before generation
    - Call excel_generator_tool with:
      * data_json: full JSON
      * color: "{color}"
      * color2: "{color2}"
    - Save file as FICHA_TECNICA_COMPLETA_{current_date}.xlsx in current folder
    - Ensure custom colors applied (not default blue)

  expected_output: "Absolute path of Excel file with number of recipes and ingredients."
  agent: excel_writer_agent
  context:
    - task_consolidate_data
